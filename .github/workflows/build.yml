---
name: Build images that changed

on:
  - push

jobs:
  image-list:
    name: build images
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.change-list.outputs.all_changed_files }}

    steps:
      - name: checkout code
        uses: actions/checkout@v4
        with:
          # full git history needed to get proper list of changed files
          fetch-depth: 0
      - name: Get list of changes
        id: change-list
        uses: tj-actions/changed-files@v44
        with:
          files: |
             **/*.json

  build-images:
    name: Image builder
    needs: image-list
    runs-on: ubuntu-latest
    strategy:
      #matrix: ${{ fromJson(needs.image-list.outputs.matrix) }}
      matrix:
        images: ["ubuntu/ubuntu-22.04.json"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Install environment
        run: |
          curl -L https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 > jq
          chmod +x jq
          pip install yq simplejson fedcloudclient
      - name: Get ready for deploy
        env:
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: |
          set -x
          cd builder
          mkdir -p ~/.config/openstack
          touch ~/.config/openstack/secure.yaml

          . refresh.sh

          refresh_token vo.access.egi.eu "$REFRESH_TOKEN" deploy images
          refresh_token cloud.egi.eu "$REFRESH_TOKEN" backend
          FEDCLOUD_LOCKER_TOKEN="$(fedcloud secret locker create \
                                   --oidc-access-token "$OIDC_TOKEN" \
                                   --ttl 1h --num-uses 2)"
          echo "::add-mask::$FEDCLOUD_LOCKER_TOKEN"
          fedcloud secret put --locker-token "$FEDCLOUD_LOCKER_TOKEN" deploy "data=@clouds.yaml"
          DEPLOY_SITE="$(yq -r .clouds.deploy.site clouds.yaml)"
          echo "DEPLOY_SITE=$DEPLOY_SITE" >> "$GITHUB_ENV"
          sed -i -e "s#%IMAGE%#${{ matrix.images }}#" cloud-init.yaml
          sed -i -e "s/%TOKEN%/${{ secrets.GITHUB_TOKEN }}/" cloud-init.yaml
          sed -i -e "s/%REF%/${{ github.sha }}/" cloud-init.yaml
          sed -i -e "s/%SHORT_REF%/$(git rev-parse --short HEAD)/" cloud-init.yaml
          sed -i -e "s/%FEDCLOUD_LOCKER_TOKEN%/$FEDCLOUD_LOCKER_TOKEN/" cloud-init.yaml
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.2.9
      - name: Terraform Format
        id: fmt
        run: |
          cd builder
          terraform fmt -check
      - name: Terraform init
        id: init
        run: |
          cd builder
          terraform init
      - name: Build the thing
        run: |
          cd builder
      - name: Terraform Apply
        id: terraform-apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd builder
          terraform apply -auto-approve -var-file="$DEPLOY_SITE.tfvars"
      - name: Get VM ID
        id: terraform-vm-id
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd builder
          terraform output -raw instance-id
      - name: Refresh backend token
        env:
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: |
          cd builder
          . refresh.sh
          refresh_token cloud.egi.eu "$REFRESH_TOKEN" backend
      - name: Get the status file from swift
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: nick-fields/retry@v3
        with:
          # this is about 40 minutes
          max_attempts: 60
          retry_wait_seconds: 40
          timeout_minutes: 5
          command: >
            pushd builder &&
            openstack --os-cloud backend object save fedcloud-vmi "${{ steps.terraform-vm-id.outputs.stdout }}" &&
            openstack --os-cloud backend object delete fedcloud-vmi "${{ steps.terraform-vm-id.outputs.stdout }}"
      - name: Look for errors
        #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd builder
          # show the status in the build log
          cat "${{ steps.terraform-vm-id.outputs.stdout }}"
          grep -q "error" "${{ steps.terraform-vm-id.outputs.stdout }}"
      - name: Refresh deploy token
        env:
          REFRESH_TOKEN: ${{ secrets.REFRESH_TOKEN }}
        run: |
          cd builder
          . refresh.sh
          refresh_token vo.access.egi.eu "$REFRESH_TOKEN" deploy
      - name: Delete VM
        if: always()
        run: |
          cd builder
          terraform destroy -auto-approve -var-file="$DEPLOY_SITE.tfvars"
